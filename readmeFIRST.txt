*To build ocamlc from source code, at directory /contracts

$./configure
$make world


*Quick reminder of syntax of contract

t ::= {x | p}     (* predicate contract *)
   | x:t1 -> t2   (* dependent function contract *)
   | t1 * t2      (* tuple contract *)

predicate contract example:
{x | x >=0}

dependent function contract example:
e.g.1  z:{x | x >=0} -> {y | y >= z}

if z only denotes a predicate contract, we can drop it, and use x directly.
That is, we assume variables scope over the RHS of ->.
e.g.2  {x | x >=0} -> {y | y >= x}  

e.g.3 k:({x | x >=0} -> {y | y >= x}) -> {z | k 1 > z}
Note that, only k can be used in {z | ...}, x and y are not in the scope.

e.g.4 {x | x > 0} * {y | y < 0} -> {z | z = x + y}
Note that, we do not support dependent tuple contract yet, i.e.
NO {x | x >=0} * {y | y > x}

Currently, only toplevel contract declaration is allowed.
e.g.5
contract f = {x | x >= 0} -> {y | y > x}
let f x = x + 5

Contracts are declared directly in .ml files with the keyword "contract". Exported contracts are in .mli files where they should be syntactically the same as those in .ml files and declared after their types. 

e.g.6 (in a .mli file)
val f: int -> int
contract f = {x | x >= 0} -> {y | y > x}

It is possible not to write a .mli file. In this case, all contracts declared in
the .ml file are presumed to be exported. 

*To test contract checking with some small examples, you can download examples from 

http://gallium.inria.fr/~naxu/research/testcontracts.tar.bz2

[I assume directories /contracts and /testcontracts are under the same directory ]

$tar -jxvf testcontracts.tar.bz2
$cd testcontracts
$make all

*If you put /testcontracts in other directories, please change the first line in
/testcontracts/Makefile, i.e. 

OCAMLDIR=../contracts

to point to the directory /contracts which contains the newly generated ocamlc. 

*To run the generated bytecode files at /testcontracts, e.g. do

$./basic

If it gives error msg saying bad interpreter /usr/local/bin/ocamlrun, 
you can link it to /contracts/boot/camlrun by

$ln /usr/local/bin/ocamlrun <path to dir contracts>/contracts/boot/ocamlrun

If it still does not work, you can just do

$../contracts/boot/ocamlrun ./basic

*By default, contract checking is switched on. 
*To switch contract checking off, you can use flag

-nocontract

