#########################################################################
#                                                                       #
#                            Objective Caml                             #
#                                                                       #
#            Xavier Leroy, projet Cristal, INRIA Rocquencourt           #
#                                                                       #
#   Copyright 1999 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the GNU Library General Public License, with     #
#   the special exception on linking described in file ../LICENSE.      #
#                                                                       #
#########################################################################

# $Id$

include ../config/Makefile

CC=$(BYTECC)
CFLAGS=-DIN_OCAMLRUN -DOCAML_STDLIB_DIR='"$(LIBDIR)"'

COMMONOBJS=interp.o misc.o stacks.o fix_code.o startup.o \
  fail.o signals.o signals_byt.o freelist.o major_gc.o minor_gc.o \
  memory.o alloc.o roots.o compare.o ints.o floats.o \
  str.o array.o io.o extern.o intern.o hash.o sys.o \
  meta.o parsing.o gc_ctrl.o terminfo.o md5.o obj.o lexing.o \
  win32.o printexc.o callback.o debugger.o weak.o compact.o \
  finalise.o custom.o backtrace.o globroots.o dynlink.o

OBJS=$(COMMONOBJS:.o=.$(O)) exports.$(O) main.$(O)
DBGOBJS=$(COMMONOBJS:.o=.$(DBGO)) prims.$(DBGO) exports.$(O) main.$(DBGO) instrtrace.$(DBGO)

PRIMS=alloc.c array.c compare.c extern.c floats.c gc_ctrl.c hash.c \
  intern.c interp.c ints.c io.c lexing.c md5.c meta.c obj.c parsing.c \
  signals.c str.c sys.c terminfo.c callback.c weak.c finalise.c stacks.c \
  dynlink.c

EXPORTS=$(COMMONOBJS:.o=.c)

PUBLIC_INCLUDES=alloc.h callback.h config.h custom.h fail.h intext.h \
  memory.h misc.h mlvalues.h printexc.h signals.h compatibility.h

all: ocamlrun.exe libcamlrun.$(A) ocamlrun.$(O)

ocamlrun.exe: libcamlrun.$(A) prims.$(O) main.$(O)
	$(call MKEXE,ocamlrun.exe,main.$(O) prims.$(O) libcamlrun.$(A))

libcamlrun.$(A): $(OBJS)
	$(call MKLIB,libcamlrun.$(A),$(OBJS))

ocamlrund.exe: opnames.h $(DBGOBJS)
	$(call MKEXE,ocamlrund.exe,$(BYTECCDBGCOMPOPTS) $(DBGOBJS))


install:
	cp ocamlrun.exe $(BINDIR)/ocamlrun.exe
	test -d $(LIBDIR)/caml || mkdir -p $(LIBDIR)/caml
	for i in $(PUBLIC_INCLUDES); do sed -f ../tools/cleanup-header $$i > $(LIBDIR)/caml/$$i; done
	cp ocamlrun.$(O) $(LIBDIR)/ocamlrun.$(O)
	cp libcamlrun.$(A) $(LIBDIR)/libcamlrun.$(A)

clean:
	rm -f *.exe *.dll *.$(O) *.$(A)
	rm -f primitives prims.c opnames.h jumptbl.h exports exports.c

primitives : $(PRIMS)
	sed -n -e "s/CAMLprim value \([a-z0-9_][a-z0-9_]*\).*/\1/p" \
	    $(PRIMS) > primitives

exports: $(EXPORTS)
	$(CPP) -DCOMPUTE_EXPORTS $(EXPORTS) \
	| sed -n -e "s/CAMLexport [^,]*\(caml[a-zA-Z0-9_]*\).*/\1/p" \
	| sort | uniq > exports

prims.c : primitives
	(echo '#include "mlvalues.h"'; \
	 echo '#include "prims.h"'; \
	 sed -e 's/.*/extern value &();/' primitives; \
	 echo 'c_primitive caml_builtin_cprim[] = {'; \
	 sed -e 's/.*/	&,/' primitives; \
	 echo '	 0 };'; \
	 echo 'char * caml_names_of_builtin_cprim[] = {'; \
	 sed -e 's/.*/	"&",/' primitives; \
	 echo '	 0 };') > prims.c

exports.c: exports
	(echo '#include "exports.h"'; \
	 sed -e 's/.*/extern void *&;/' exports; \
	 sed -e 's/.*/void *_imp__& = (void*)(\&&);/' exports; \
	 echo 'void * caml_export_symbols[] = {'; \
	 sed -e 's/.*/	(void*)(\&&),/' exports; \
	 echo '	 0 };'; \
	 echo 'char * caml_names_of_export_symbols[] = {'; \
	 sed -e 's/.*/	"_imp__&",/' exports; \
	 echo '	 0 };') > exports.c


ocamlrun.c: exports
	sed -e 's/.*/__declspec(dllexport) void *_imp__& = 0;/' exports \
	> ocamlrun.c

opnames.h : instruct.h
	sed -e '/\/\*/d' \
	    -e '/^#/d' \
	    -e 's/enum /char * names_of_/' \
	    -e 's/{$$/[] = {/' \
	    -e 's/\([[:upper:]][[:upper:]_0-9]*\)/"\1"/g' instruct.h > opnames.h

# jumptbl.h is required only if you have GCC 2.0 or later
jumptbl.h : instruct.h
	sed -n -e "/^  /s/ \([A-Z]\)/ \&\&lbl_\1/gp" \
	       -e "/^}/q" instruct.h > jumptbl.h

version.h : ../VERSION
	echo "#define OCAML_VERSION \"`head -1 ../VERSION`\"" >version.h

.SUFFIXES: .$(O) .$(DBGO)

.c.$(O):
	$(CC) $(CFLAGS) $(BYTECCCOMPOPTS) -c $<

.c.$(DBGO):
	$(CC) $(CFLAGS) $(BYTECCDBGCOMPOPTS) -c $<
	mv $*.$(O) $*.$(DBGO)

.depend.nt: .depend
	rm -f .depend.win32
	echo "win32.o: win32.c fail.h compatibility.h misc.h config.h \\" >> .depend.win32
	echo " ../config/m.h ../config/s.h mlvalues.h memory.h gc.h \\" >> .depend.win32
	echo " major_gc.h freelist.h minor_gc.h osdeps.h signals.h exports.h" >> .depend.win32
	cat .depend >> .depend.win32
	sed -e '/\.d\.o/q' -e 's/^\(.*\)\.o:/\1.$$(O) \1.$$(DBGO):/' .depend.win32 > .depend.nt
	rm -f .depend.win32

include .depend.nt
