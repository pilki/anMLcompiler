# Build the OCamlDuce tools using an existing OCaml installation

all: ocamlducec ocamlduce ocamlducedep ocamlducedoc ocamlduce.cma
opt: all ocamlduceopt ocamlducec.opt ocamlduceopt.opt ocamlducedep.opt ocamlducedoc.opt ocamlduce.cmxa


include config/Makefile
include stdlib/StdlibModules

CAMLC=ocamlc.opt
CAMLOPT=ocamlopt.opt
CAMLYACC=ocamlyacc
YACCFLAGS=-v
CAMLLEX=ocamllex
CAMLDEP=ocamldep.opt
DEPFLAGS=$(INCLUDES)

INCLUDES=-I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver \
         -I toplevel -I tools

COMPFLAGS=-warn-error A $(INCLUDES)
LINKFLAGS=

UTILS=cduce_types.cmo utils/misc.cmo utils/tbl.cmo utils/config.cmo \
  utils/clflags.cmo utils/terminfo.cmo utils/ccomp.cmo utils/warnings.cmo \
  utils/consistbl.cmo

OPTUTILS=$(UTILS)

PARSING=parsing/linenum.cmo parsing/location.cmo parsing/longident.cmo \
  parsing/syntaxerr.cmo parsing/parser.cmo \
  parsing/lexer.cmo parsing/parse.cmo parsing/printast.cmo

TYPING=typing/ident.cmo typing/path.cmo \
  typing/primitive.cmo typing/types.cmo \
  typing/btype.cmo typing/oprint.cmo \
  typing/subst.cmo typing/predef.cmo \
  typing/datarepr.cmo typing/env.cmo \
  typing/typedtree.cmo typing/ctype.cmo  \
  typing/printtyp.cmo typing/typeext.cmo \
  typing/includeclass.cmo \
  typing/mtype.cmo typing/includecore.cmo \
  typing/includemod.cmo typing/parmatch.cmo \
  typing/typetexp.cmo typing/stypes.cmo typing/typecore.cmo \
  typing/typedecl.cmo typing/typeclass.cmo \
  typing/typemod.cmo

COMP=bytecomp/lambda.cmo bytecomp/printlambda.cmo \
  bytecomp/typeopt.cmo bytecomp/switch.cmo bytecomp/matching.cmo \
  bytecomp/translobj.cmo bytecomp/translext.cmo bytecomp/translcore.cmo \
  bytecomp/translclass.cmo bytecomp/translmod.cmo \
  bytecomp/simplif.cmo bytecomp/runtimedef.cmo

BYTECOMP=bytecomp/meta.cmo bytecomp/instruct.cmo bytecomp/bytegen.cmo \
  bytecomp/printinstr.cmo bytecomp/opcodes.cmo bytecomp/emitcode.cmo \
  bytecomp/bytesections.cmo bytecomp/dll.cmo bytecomp/symtable.cmo \
  bytecomp/bytelink.cmo bytecomp/bytelibrarian.cmo bytecomp/bytepackager.cmo

ASMCOMP=asmcomp/arch.cmo asmcomp/cmm.cmo asmcomp/printcmm.cmo \
  asmcomp/reg.cmo asmcomp/mach.cmo asmcomp/proc.cmo \
  asmcomp/clambda.cmo asmcomp/compilenv.cmo \
  asmcomp/closure.cmo asmcomp/cmmgen.cmo \
  asmcomp/printmach.cmo asmcomp/selectgen.cmo asmcomp/selection.cmo \
  asmcomp/comballoc.cmo asmcomp/liveness.cmo \
  asmcomp/spill.cmo asmcomp/split.cmo \
  asmcomp/interf.cmo asmcomp/coloring.cmo \
  asmcomp/reloadgen.cmo asmcomp/reload.cmo \
  asmcomp/printlinear.cmo asmcomp/linearize.cmo \
  asmcomp/schedgen.cmo asmcomp/scheduling.cmo \
  asmcomp/emitaux.cmo asmcomp/emit.cmo asmcomp/asmgen.cmo \
  asmcomp/asmlink.cmo asmcomp/asmlibrarian.cmo asmcomp/asmpackager.cmo

DRIVER=driver/pparse.cmo driver/errors.cmo driver/compile.cmo \
  driver/main_args.cmo driver/main.cmo

OPTDRIVER= driver/pparse.cmo driver/opterrors.cmo driver/optcompile.cmo \
  driver/optmain.cmo

TOPLEVEL=driver/pparse.cmo driver/errors.cmo driver/compile.cmo \
  toplevel/genprintval.cmo toplevel/toploop.cmo \
  toplevel/trace.cmo toplevel/topdirs.cmo toplevel/topmain.cmo

TOPLEVELLIB=toplevel/toplevelducelib.cma
TOPLEVELSTART=toplevel/topstart.cmo

COMPOBJS=$(UTILS) $(PARSING) $(TYPING) $(COMP) $(BYTECOMP) $(DRIVER)

TOPLIB=$(UTILS) $(PARSING) $(TYPING) $(COMP) $(BYTECOMP) $(TOPLEVEL)

TOPOBJS=$(TOPLEVELLIB) $(TOPLEVELSTART)

OPTOBJS=$(OPTUTILS) $(PARSING) $(TYPING) $(COMP) $(ASMCOMP) $(OPTDRIVER)

EXPUNGEOBJS=utils/misc.cmo utils/tbl.cmo \
  utils/config.cmo utils/clflags.cmo \
  typing/ident.cmo typing/path.cmo typing/types.cmo typing/btype.cmo \
  typing/predef.cmo bytecomp/runtimedef.cmo bytecomp/bytesections.cmo \
  bytecomp/dll.cmo bytecomp/meta.cmo bytecomp/symtable.cmo toplevel/expunge.cmo

PERVASIVES=$(STDLIB_MODULES) outcometree topdirs toploop

CDUCE=\
  stdlib/cduce/custom.cmo stdlib/cduce/encodings.cmo \
  stdlib/cduce/imap.cmo stdlib/cduce/upool.cmo \
  stdlib/cduce/ns.cmo stdlib/cduce/sortedList.cmo stdlib/cduce/atoms.cmo \
  stdlib/cduce/bool.cmo stdlib/cduce/chars.cmo stdlib/cduce/ident.cmo \
  stdlib/cduce/intervals.cmo stdlib/cduce/inttbl.cmo stdlib/cduce/normal.cmo \
  stdlib/cduce/pretty.cmo stdlib/cduce/stats.cmo \
  stdlib/cduce/compunit.cmo \
  stdlib/cduce/types.cmo stdlib/cduce/sequence.cmo stdlib/cduce/sample.cmo \
  stdlib/cduce/auto_pat.cmo stdlib/cduce/patterns.cmo \
  stdlib/cduce/value.cmo stdlib/cduce/run_dispatch.cmo stdlib/cduce/explain.cmo \
  stdlib/cduce/typepat.cmo \
  stdlib/cduce/serial.cmo

# The compiler

ocamlducec: $(COMPOBJS)
	$(CAMLC) $(LINKFLAGS) -o ocamlducec nums.cma $(COMPOBJS)

clean::
	rm -f ocamlducec

# The native-code compiler

ocamlduceopt: $(OPTOBJS)
	$(CAMLC) $(LINKFLAGS) -o ocamlduceopt nums.cma $(OPTOBJS)

clean::
	rm -f ocamlduceopt

# The toplevel

ocamlduce: $(TOPOBJS) expunge
	$(CAMLC) $(LINKFLAGS) -linkall -o ocamlduce.tmp nums.cma $(TOPOBJS)
	./expunge ocamlduce.tmp ocamlduce $(PERVASIVES)
	rm -f ocamlduce.tmp

toplevel/toplevelducelib.cma: $(TOPLIB)
	$(CAMLC) -a -o $@ $(TOPLIB)

clean::
	rm -f ocamlduce toplevel/toplevelducelib.cma

# The configuration file

utils/config.ml: utils/config.mlp config/Makefile
	$(MAKE) utils/config.ml

clean::
	rm -f utils/config.ml

beforedepend:: utils/config.ml

# The parser

parsing/parser.mli parsing/parser.ml: parsing/parser.mly
	$(CAMLYACC) $(YACCFLAGS) parsing/parser.mly

clean::
	rm -f parsing/parser.mli parsing/parser.ml parsing/parser.output

beforedepend:: parsing/parser.mli parsing/parser.ml

# The lexer

parsing/lexer.ml: parsing/lexer.mll
	$(CAMLLEX) parsing/lexer.mll

clean::
	rm -f parsing/lexer.ml

beforedepend:: parsing/lexer.ml

# The auxiliary lexer for counting line numbers

parsing/linenum.ml: parsing/linenum.mll
	$(CAMLLEX) parsing/linenum.mll

clean::
	rm -f parsing/linenum.ml

beforedepend:: parsing/linenum.ml

# The bytecode compiler compiled with the native-code compiler

ocamlducec.opt: $(COMPOBJS:.cmo=.cmx)
	cd asmrun; $(MAKE) meta.o dynlink.o
	$(CAMLOPT) $(LINKFLAGS) -ccopt "$(BYTECCLINKOPTS)" -o ocamlducec.opt \
          nums.cmxa $(COMPOBJS:.cmo=.cmx) \
          asmrun/meta.o asmrun/dynlink.o -cclib "$(BYTECCLIBS)"

clean::
	rm -f ocamlduce.opt

# The native-code compiler compiled with itself

ocamlduceopt.opt: $(OPTOBJS:.cmo=.cmx)
	$(CAMLOPT) $(LINKFLAGS) -o ocamlduceopt.opt nums.cmxa $(OPTOBJS:.cmo=.cmx)

clean::
	rm -f ocamlduceopt.opt

# The numeric opcodes

bytecomp/opcodes.ml: byterun/instruct.h
	$(MAKE) bytecomp/opcodes.ml

clean::
	rm -f bytecomp/opcodes.ml

beforedepend:: bytecomp/opcodes.ml

# The predefined exceptions and primitives

byterun/primitives:
	cd byterun; $(MAKE) primitives

bytecomp/runtimedef.ml: byterun/primitives byterun/fail.h
	$(MAKE) bytecomp/runtimedef.ml

clean::
	rm -f bytecomp/runtimedef.ml

beforedepend:: bytecomp/runtimedef.ml

# Choose the right machine-dependent files

asmcomp/arch.ml: asmcomp/$(ARCH)/arch.ml
	ln -s $(ARCH)/arch.ml asmcomp/arch.ml

clean::
	rm -f asmcomp/arch.ml

beforedepend:: asmcomp/arch.ml

asmcomp/proc.ml: asmcomp/$(ARCH)/proc.ml
	ln -s $(ARCH)/proc.ml asmcomp/proc.ml

clean::
	rm -f asmcomp/proc.ml

beforedepend:: asmcomp/proc.ml

asmcomp/selection.ml: asmcomp/$(ARCH)/selection.ml
	ln -s $(ARCH)/selection.ml asmcomp/selection.ml

clean::
	rm -f asmcomp/selection.ml

beforedepend:: asmcomp/selection.ml

asmcomp/reload.ml: asmcomp/$(ARCH)/reload.ml
	ln -s $(ARCH)/reload.ml asmcomp/reload.ml

clean::
	rm -f asmcomp/reload.ml

beforedepend:: asmcomp/reload.ml

asmcomp/scheduling.ml: asmcomp/$(ARCH)/scheduling.ml
	ln -s $(ARCH)/scheduling.ml asmcomp/scheduling.ml

clean::
	rm -f asmcomp/scheduling.ml

beforedepend:: asmcomp/scheduling.ml

# Preprocess the code emitters

asmcomp/emit.ml: asmcomp/$(ARCH)/emit.mlp tools/cvt_emit
	tools/cvt_emit < asmcomp/$(ARCH)/emit.mlp > asmcomp/emit.ml \
        || { rm -f asmcomp/emit.ml; exit 2; }

clean::
	rm -f asmcomp/emit.ml

beforedepend:: asmcomp/emit.ml

tools/cvt_emit: tools/cvt_emit.mll
	cd tools; $(MAKE) CAMLC="$(CAMLC)" cvt_emit

# The "expunge" utility

expunge: $(EXPUNGEOBJS)
	$(CAMLC) $(LINKFLAGS) -o expunge $(EXPUNGEOBJS)

clean::
	rm -f expunge

# Default rules

.SUFFIXES: .ml .mli .cmo .cmi .cmx

.ml.cmo:
	$(CAMLC) $(COMPFLAGS) -c $<

.mli.cmi:
	$(CAMLC) $(COMPFLAGS) -c $<

.ml.cmx:
	$(CAMLOPT) $(COMPFLAGS) -c $<

clean::
	rm -f utils/*.cm[iox] utils/*.[so] utils/*~
	rm -f parsing/*.cm[iox] parsing/*.[so] parsing/*~
	rm -f typing/*.cm[iox] typing/*.[so] typing/*~
	rm -f bytecomp/*.cm[iox] bytecomp/*.[so] bytecomp/*~
	rm -f asmcomp/*.cm[iox] asmcomp/*.[so] asmcomp/*~
	rm -f driver/*.cm[iox] driver/*.[so] driver/*~
	rm -f toplevel/*.cm[iox] toplevel/*.[so] toplevel/*~
	rm -f tools/*.cm[iox] tools/*.[so] tools/*~
	rm -f stdlib/cduce/*.cm[iox] stdlib/cduce/*.[so] stdlib/cduce/*~
	rm -f *~
	(cd tests; $(MAKE) clean)

depend: beforedepend
	touch cduce_types.mli
	touch cduce_types.ml
	(for d in utils parsing typing bytecomp asmcomp driver toplevel; \
	 do $(CAMLDEP) $(DEPFLAGS) $$d/*.mli $$d/*.ml; \
	 done) > .depend.ocamlduce
	$(CAMLDEP) -I stdlib/cduce \
	  stdlib/cduce/*.mli stdlib/cduce/*.ml >> .depend.ocamlduce

FORCE:

include .depend.ocamlduce

# The pack'ed modules from CDuce

cduce_types.cmi cduce_types.cmo:
	$(MAKE) -f Makefile.ocamlduce INCLUDES="-I stdlib/cduce" $(CDUCE)
	rm -f cduce_types.mli cduce_types.cmi
	$(CAMLC) -pack -o cduce_types.cmo $(CDUCE)

cduce_types.cmx:
	$(MAKE) -f Makefile.ocamlduce INCLUDES="-I stdlib/cduce" $(CDUCE:.cmo=.cmx)
	rm -f cduce_types.mli cduce_types.cmi
	$(CAMLOPT) -pack -o cduce_types.cmx $(CDUCE:.cmo=.cmx)

clean::
	rm -f cduce_types.*

# The OCamlDuce library

ocamlduce.cma: ocamlducec cduce_types.cmo stdlib/ocamlduce.cmo
	./ocamlducec -a -o ocamlduce.cma cduce_types.cmo stdlib/ocamlduce.cmo

stdlib/ocamlduce.cmo: ocamlducec stdlib/ocamlduce.ml stdlib/ocamlduce.cmi
	./ocamlducec -c -I stdlib stdlib/ocamlduce.ml

stdlib/ocamlduce.cmi: ocamlducec stdlib/ocamlduce.mli
	./ocamlducec -c stdlib/ocamlduce.mli

ocamlduce.cmxa: ocamlduceopt cduce_types.cmx stdlib/ocamlduce.cmx
	./ocamlduceopt -a -o ocamlduce.cmxa cduce_types.cmx stdlib/ocamlduce.cmx
stdlib/ocamlduce.cmx: ocamlduceopt stdlib/ocamlduce.ml stdlib/ocamlduce.cmi
	./ocamlduceopt -c -I stdlib stdlib/ocamlduce.ml

# The dependency generator

CAMLDEP_OBJ=tools/depend.cmo tools/ocamldep.cmo
CAMLDEP_IMPORTS=cduce_types.cmo \
  utils/misc.cmo utils/config.cmo utils/clflags.cmo \
  utils/terminfo.cmo \
  parsing/linenum.cmo utils/warnings.cmo parsing/location.cmo \
  parsing/longident.cmo \
  parsing/syntaxerr.cmo parsing/parser.cmo parsing/lexer.cmo parsing/parse.cmo

ocamlducedep: tools/depend.cmi $(CAMLDEP_OBJ)
	$(CAMLC) $(LINKFLAGS) -o ocamlducedep nums.cma $(CAMLDEP_IMPORTS) $(CAMLDEP_OBJ)

ocamlducedep.opt: tools/depend.cmi $(CAMLDEP_OBJ:.cmo=.cmx)
	$(CAMLOPT) $(LINKFLAGS) -o ocamlducedep.opt nums.cmxa \
		   $(CAMLDEP_IMPORTS:.cmo=.cmx) \
	           $(CAMLDEP_OBJ:.cmo=.cmx)



# OCamldoc

ocamlducedoc:
	cd ocamldoc && $(MAKE) OCAMLC=$(CAMLC) OCAMLOPT=$(CAMLOPT) OCAMLLEX=$(CAMLLEX) OCAMLYACC=$(CAMLYACC) LINKFLAGS="nums.cma ../cduce_types.cmo" ocamldoc
	cp ocamldoc/ocamldoc ./ocamlducedoc

ocamlducedoc.opt:
	cd ocamldoc && $(MAKE) OCAMLC=$(CAMLC) OCAMLOPT=$(CAMLOPT) OCAMLLEX=$(CAMLLEX) OCAMLYACC=$(CAMLYACC) LINKFLAGS="nums.cmxa ../cduce_types.cmx" ocamldoc.opt
	cp ocamldoc/ocamldoc.opt ./ocamlducedoc.opt


partialclean::
	cd ocamldoc && $(MAKE) clean
alldepend::
	cd ocamldoc && $(MAKE) depend


# Findlib installation

INSTALL_FILES= \
 ocamlducec ocamlduce ocamlducedep ocamlducedoc ocamlduce.cma \
 ocamlduceopt ocamlduce.cmxa \
 ocamlducec.opt ocamlduceopt.opt ocamlducedep.opt ocamlducedoc.opt \
 ocamlduce.cmi cduce_types.cmi ocamlduce.mli

install: FORCE
	ocamlfind install ocamlduce META $(wildcard $(INSTALL_FILES))

uninstall: FORCE
	ocamlfind remove ocamlduce