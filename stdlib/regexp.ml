# 1 "regexp.mll"
 
open Lexing

type token =
  | MetaChar of char
  | Group of string option * token list
  | Escaped of string
  | Quoted of string
  | Quantifier of bool (* greedieness *) * int * int * token
  | Char of char
  | CharClass of bool (* pos/neg *) * charclass list
  | Comment of string
  | Modifier of string
  | Cluster of string * token list
  | LookAhead of bool (* pos/neg *) * token list
  | LookBehind of bool (* pos/neg *) * token list
  | Independent of token list
  | PBackRef of string
  | Recursive of string option (* None = entire *)
  | CallOut of int
  | CallOutByName of string

and charclass = 
  | ClassChar of token
  | ClassPOSIX of bool (* pos/neg *) * string
  | ClassRange of token * token
  | ClassQuoted of string

let char_lexeme lexbuf = (lexeme lexbuf).[0]

exception Error of int * int * string

let error lexbuf s =
  raise (Error (lexeme_start lexbuf, lexeme_end lexbuf, s))

let posix_character_classes = [
  "alpha"; "alnum"; "ascii"; "blank"; "cntrl"; "digit"; "graph";
  "lower"; "print"; "punct"; "space"; "upper"; "word"; "xdigit"
]

let get_class_name start lexbuf =
  let lxm = lexeme lexbuf in
  let classname = String.sub lxm start (String.length lxm - (start + 2)) in
  if not (List.mem classname posix_character_classes) then
    error lexbuf "unknown POSIX class"
  else classname

# 50 "regexp.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\232\255\233\255\001\000\001\000\252\255\253\255\000\000\
    \255\255\016\000\236\255\001\000\239\255\240\255\241\255\242\255\
    \007\000\014\000\003\000\050\000\004\000\125\000\091\000\173\000\
    \163\000\189\000\008\001\250\255\090\001\249\255\248\255\172\001\
    \246\255\247\255\254\001\190\000\245\255\244\255\243\255\237\255\
    \238\255\234\255\010\000\073\002\003\000\004\000\005\000\251\255\
    \087\002\097\002\006\000\107\002\007\000\008\000\006\000\001\000\
    \230\000\006\000\232\000\001\000\000\000\041\001\002\000\072\000\
    \004\000\042\001\015\000\254\255\005\000\057\001\098\002\021\000\
    \043\001\044\001\094\001\016\000\173\001\017\000\138\002\042\002\
    \003\000\136\000\171\001\211\002\151\002\190\002\014\003\052\003\
    \019\000\021\000\071\000\104\000\008\001\009\001\056\001";
  Lexing.lex_backtrk = 
   "\024\000\255\255\255\255\020\000\004\000\255\255\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\012\000\255\255\002\000\001\000\000\000\255\255\
    \255\255\255\255\006\000\255\255\007\000\008\000\001\000\000\000\
    \001\000\001\000\006\000\004\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\001\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\018\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\056\000\
    \056\000\255\255\027\000\255\255\255\255\062\000\062\000\065\000\
    \255\255\065\000\255\255\000\000\255\255\006\000\255\255\255\255\
    \073\000\073\000\076\000\255\255\076\000\255\255\008\000\008\000\
    \255\255\255\255\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\008\000\008\000\092\000\094\000\094\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\039\000\000\000\005\000\000\000\000\000\000\000\
    \004\000\255\255\002\000\002\000\038\000\033\000\006\000\008\000\
    \015\000\012\000\069\000\018\000\046\000\045\000\000\000\015\000\
    \000\000\015\000\061\000\016\000\064\000\016\000\040\000\002\000\
    \009\000\014\000\027\000\047\000\005\000\032\000\036\000\037\000\
    \014\000\044\000\014\000\008\000\011\000\013\000\010\000\072\000\
    \000\000\008\000\005\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\007\000\057\000\005\000\041\000\
    \021\000\067\000\020\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\067\000\008\000\008\000\091\000\
    \016\000\090\000\000\000\000\000\016\000\000\000\000\000\017\000\
    \000\000\017\000\016\000\017\000\005\000\017\000\092\000\016\000\
    \000\000\017\000\064\000\017\000\000\000\043\000\017\000\000\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\000\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
    \000\000\025\000\024\000\022\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\030\000\000\000\
    \088\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\036\000\
    \000\000\000\000\000\000\089\000\000\000\000\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \088\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\255\255\060\000\059\000\008\000\027\000\255\255\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\066\000\255\255\075\000\026\000\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\029\000\000\000\008\000\255\255\063\000\
    \000\000\074\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\071\000\070\000\255\255\000\000\
    \075\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\008\000\000\000\000\000\
    \000\000\028\000\000\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\032\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\255\255\077\000\
    \255\255\000\000\000\000\000\000\000\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\
    \255\255\255\255\000\000\031\000\000\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\037\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\255\255\000\000\000\000\000\000\034\000\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\049\000\000\000\000\000\255\255\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\093\000\008\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
    \000\000\008\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\000\000\000\000\008\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\000\000\000\000\000\000\050\000\008\000\000\000\000\000\
    \080\000\008\000\079\000\000\000\000\000\000\000\052\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\081\000\000\000\
    \053\000\000\000\000\000\000\000\000\000\082\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\083\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\000\000\000\000\000\000\000\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\000\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\008\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\011\000\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\018\000\020\000\000\000\054\000\
    \016\000\009\000\068\000\009\000\042\000\042\000\255\255\017\000\
    \255\255\009\000\060\000\017\000\062\000\009\000\011\000\000\000\
    \004\000\016\000\044\000\045\000\046\000\050\000\052\000\053\000\
    \017\000\042\000\009\000\057\000\009\000\009\000\009\000\071\000\
    \255\255\007\000\059\000\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\055\000\000\000\003\000\
    \009\000\064\000\009\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\066\000\075\000\077\000\088\000\
    \016\000\089\000\255\255\255\255\016\000\255\255\255\255\017\000\
    \255\255\009\000\016\000\017\000\000\000\009\000\080\000\016\000\
    \255\255\017\000\063\000\009\000\255\255\042\000\017\000\255\255\
    \009\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\255\255\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\255\255\
    \255\255\021\000\021\000\021\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\023\000\255\255\
    \081\000\255\255\255\255\255\255\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\035\000\
    \255\255\255\255\255\255\081\000\255\255\255\255\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \081\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\055\000\062\000\018\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\056\000\058\000\058\000\058\000\026\000\090\000\
    \063\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\061\000\065\000\072\000\073\000\026\000\
    \091\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\028\000\255\255\092\000\093\000\061\000\
    \255\255\072\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\069\000\069\000\069\000\255\255\
    \074\000\255\255\255\255\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\094\000\255\255\255\255\
    \255\255\028\000\255\255\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\031\000\255\255\255\255\
    \255\255\255\255\082\000\255\255\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\056\000\076\000\
    \058\000\255\255\255\255\255\255\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\082\000\
    \092\000\093\000\255\255\031\000\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\034\000\
    \255\255\061\000\065\000\072\000\073\000\255\255\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \094\000\069\000\255\255\255\255\255\255\255\255\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\079\000\255\255\255\255\255\255\034\000\074\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\048\000\255\255\255\255\079\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\079\000\070\000\255\255\
    \255\255\255\255\255\255\082\000\255\255\076\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\070\000\255\255\255\255\
    \255\255\070\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\255\255\255\255\070\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\255\255\255\255\255\255\048\000\070\000\255\255\255\255\
    \078\000\070\000\078\000\255\255\255\255\255\255\049\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\078\000\255\255\
    \051\000\255\255\255\255\255\255\255\255\078\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \255\255\255\255\078\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\078\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\083\000\083\000\083\000\083\000\
    \083\000\083\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\079\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\083\000\083\000\083\000\083\000\
    \083\000\083\000\255\255\255\255\255\255\255\255\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\083\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\255\255\086\000\
    \086\000\086\000\086\000\086\000\086\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\078\000\086\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\087\000\087\000\087\000\
    \087\000\087\000\087\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec tokens lexbuf =
    __ocaml_lex_tokens_rec lexbuf 0
and __ocaml_lex_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 70 "regexp.mll"
      (
        let re = Quoted (quoted lexbuf (Buffer.create 16)) in
	let res = tokens lexbuf in
	re :: res
      )
# 388 "regexp.ml"

  | 1 ->
# 79 "regexp.mll"
      ( 
	let re = quantifier lexbuf (escaped lexbuf) in
	let res = tokens lexbuf in
	re :: res
      )
# 397 "regexp.ml"

  | 2 ->
# 86 "regexp.mll"
      (
        let re = quantifier lexbuf (MetaChar '.') in
	let res = tokens lexbuf in
	re :: res
      )
# 406 "regexp.ml"

  | 3 ->
# 92 "regexp.mll"
      (
        let re = MetaChar (char_lexeme lexbuf) in
	let res = tokens lexbuf in
	re :: res
     )
# 415 "regexp.ml"

  | 4 ->
# 98 "regexp.mll"
      (
        let re = quantifier lexbuf (Group (None, group lexbuf)) in
	let res = tokens lexbuf in
	re :: res 
      )
# 424 "regexp.ml"

  | 5 ->
# 105 "regexp.mll"
      (
         (* python style named pattern *)
         let lxm = lexeme lexbuf in
	 let name = String.sub lxm 4 (String.length lxm - 5) in
	 let re = Group (Some name, group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 436 "regexp.ml"

  | 6 ->
# 115 "regexp.mll"
      (
         (* python style back reference *)
         let lxm = lexeme lexbuf in
	 let name = String.sub lxm 4 (String.length lxm - 5) in
	 let re = PBackRef name in
	 let res = tokens lexbuf in
	 re :: res
      )
# 448 "regexp.ml"

  | 7 ->
# 126 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let name = String.sub lxm 3 (String.length lxm - 4) in
	 let re = Recursive (Some name) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 459 "regexp.ml"

  | 8 ->
# 134 "regexp.mll"
      (
	 let re = Recursive None in
	 let res = tokens lexbuf in
	 re :: res
      )
# 468 "regexp.ml"

  | 9 ->
# 141 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let name = String.sub lxm 4 (String.length lxm - 5) in
	 let re = Recursive (Some name) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 479 "regexp.ml"

  | 10 ->
# 151 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let name = String.sub lxm 3 (String.length lxm - 4) in
	 let pos = 
	   match name with
	   | "" -> 0
	   | _ -> int_of_string name
	 in
	 let re = CallOut pos in
	 let res = tokens lexbuf in
	 re :: res
      )
# 495 "regexp.ml"

  | 11 ->
# 166 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let name = String.sub lxm 3 (String.length lxm - 4) in
	 let re = CallOutByName name in
	 let res = tokens lexbuf in
	 re :: res
      )
# 506 "regexp.ml"

  | 12 ->
# 176 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let re = Comment (String.sub lxm 3 (String.length lxm - 4)) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 516 "regexp.ml"

  | 13 ->
# 183 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let re = Modifier (String.sub lxm 2 (String.length lxm - 3)) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 526 "regexp.ml"

  | 14 ->
# 191 "regexp.mll"
      (
         let lxm = lexeme lexbuf in
	 let pos = String.index lxm ':' in
	 let md = String.sub lxm 2 (pos - 2) in
	 let re = Cluster(md, group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 538 "regexp.ml"

  | 15 ->
# 200 "regexp.mll"
      (
	 let re = LookAhead(true, group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 547 "regexp.ml"

  | 16 ->
# 206 "regexp.mll"
      (
	 let re = LookAhead(false, group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 556 "regexp.ml"

  | 17 ->
# 212 "regexp.mll"
      (
	 let re = LookBehind(true, group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 565 "regexp.ml"

  | 18 ->
# 218 "regexp.mll"
      (
	 let re = LookBehind(false, group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 574 "regexp.ml"

  | 19 ->
# 224 "regexp.mll"
      (
	 let re = Independent (group lexbuf) in
	 let res = tokens lexbuf in
	 re :: res
      )
# 583 "regexp.ml"

  | 20 ->
# 231 "regexp.mll"
      (
       let re = quantifier lexbuf (CharClass (true, charclass lexbuf)) in
	let res = tokens lexbuf in
	re :: res 
      )
# 592 "regexp.ml"

  | 21 ->
# 237 "regexp.mll"
      (
       let re = quantifier lexbuf (CharClass (false, charclass lexbuf)) in
	let res = tokens lexbuf in
	re :: res 
      )
# 601 "regexp.ml"

  | 22 ->
# 243 "regexp.mll"
      (
        (* quantifiers cannot go here *)
        error lexbuf "Quantifier follows nothing in regex"
      )
# 609 "regexp.ml"

  | 23 ->
# 249 "regexp.mll"
      (
        let re = quantifier lexbuf (Char (char_lexeme lexbuf)) in
	let res = tokens lexbuf in
	re :: res
      )
# 618 "regexp.ml"

  | 24 ->
# 254 "regexp.mll"
       ( [] )
# 623 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tokens_rec lexbuf __ocaml_lex_state

and quantifier lexbuf =
    __ocaml_lex_quantifier_rec lexbuf 42
and __ocaml_lex_quantifier_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 257 "regexp.mll"
        ((fun tk -> Quantifier (true, 0, -1, tk)))
# 634 "regexp.ml"

  | 1 ->
# 258 "regexp.mll"
        ((fun tk -> Quantifier (true, 1, -1, tk)))
# 639 "regexp.ml"

  | 2 ->
# 259 "regexp.mll"
        ((fun tk -> Quantifier (true, 0, 1, tk)))
# 644 "regexp.ml"

  | 3 ->
# 260 "regexp.mll"
         ((fun tk -> Quantifier (false, 0, -1, tk)))
# 649 "regexp.ml"

  | 4 ->
# 261 "regexp.mll"
         ((fun tk -> Quantifier (false, 1, -1, tk)))
# 654 "regexp.ml"

  | 5 ->
# 262 "regexp.mll"
         ((fun tk -> Quantifier (false, 0, 1, tk)))
# 659 "regexp.ml"

  | 6 ->
# 264 "regexp.mll"
      (
        fun tk ->
          let lxm = lexeme lexbuf in
	  let d = int_of_string (String.sub lxm 1 (String.length lxm - 2)) in
	  Quantifier (true, d, d, tk)
      )
# 669 "regexp.ml"

  | 7 ->
# 271 "regexp.mll"
      (
        fun tk ->
          let lxm = lexeme lexbuf in
	  let d = int_of_string (String.sub lxm 1 (String.length lxm - 3)) in
	  Quantifier (true, d, -1, tk)
      )
# 679 "regexp.ml"

  | 8 ->
# 278 "regexp.mll"
      (
        fun tk ->
          let lxm = lexeme lexbuf in
	  let pos = String.index lxm ',' in
	  let d1 = 
	    int_of_string (String.sub lxm 1 (pos - 1)) 
	  in
	  let d2 = 
	    int_of_string 
	      (String.sub lxm (pos + 1) (String.length lxm - pos - 2)) 
	  in
	  Quantifier (true, d1, d2, tk)
      )
# 696 "regexp.ml"

  | 9 ->
# 292 "regexp.mll"
      (
        fun tk ->
          let lxm = lexeme lexbuf in
	  let d = int_of_string (String.sub lxm 1 (String.length lxm - 3)) in
	  Quantifier (false, d, d, tk)
      )
# 706 "regexp.ml"

  | 10 ->
# 299 "regexp.mll"
      (
        fun tk ->
          let lxm = lexeme lexbuf in
	  let d = int_of_string (String.sub lxm 1 (String.length lxm - 4)) in
	  Quantifier (false, d, -1, tk)
      )
# 716 "regexp.ml"

  | 11 ->
# 306 "regexp.mll"
      (
        fun tk ->
          let lxm = lexeme lexbuf in
	  let pos = String.index lxm ',' in
	  let d1 = 
	    int_of_string (String.sub lxm 1 (pos - 1)) 
	  in
	  let d2 = 
	    int_of_string 
	      (String.sub lxm (pos + 1) (String.length lxm - pos - 3)) 
	  in
	  Quantifier (false, d1, d2, tk)
      )
# 733 "regexp.ml"

  | 12 ->
# 319 "regexp.mll"
       ((fun tk -> tk))
# 738 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_quantifier_rec lexbuf __ocaml_lex_state

and group lexbuf =
    __ocaml_lex_group_rec lexbuf 54
and __ocaml_lex_group_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 322 "regexp.mll"
        ( [] )
# 749 "regexp.ml"

  | 1 ->
# 324 "regexp.mll"
      (
        let res = tokens lexbuf in
	let res' = group lexbuf in
	res @ res' 
      )
# 758 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_group_rec lexbuf __ocaml_lex_state

and quoted lexbuf =
    __ocaml_lex_quoted_rec lexbuf 55
and __ocaml_lex_quoted_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 331 "regexp.mll"
               ( fun buf -> Buffer.contents buf )
# 769 "regexp.ml"

  | 1 ->
# 334 "regexp.mll"
      ( 
	fun buf -> 
	  Buffer.add_string buf (lexeme lexbuf);
	  quoted lexbuf buf
      )
# 778 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_quoted_rec lexbuf __ocaml_lex_state

and charclass lexbuf =
    __ocaml_lex_charclass_rec lexbuf 58
and __ocaml_lex_charclass_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 341 "regexp.mll"
        ( [] )
# 789 "regexp.ml"

  | 1 ->
# 343 "regexp.mll"
      ( 
	let cls = ClassPOSIX (true, get_class_name 2 lexbuf) in
	cls :: charclass lexbuf
      )
# 797 "regexp.ml"

  | 2 ->
# 348 "regexp.mll"
      ( 
	let cls = ClassPOSIX (false, get_class_name 3 lexbuf) in
	cls :: charclass lexbuf
      )
# 805 "regexp.ml"

  | 3 ->
# 353 "regexp.mll"
      (
       let cls = ClassQuoted (quoted lexbuf (Buffer.create 16)) in
	cls :: charclass lexbuf
      )
# 813 "regexp.ml"

  | 4 ->
# 358 "regexp.mll"
      (
        let e = escaped lexbuf in
	let clses = range lexbuf e in
	clses @ charclass lexbuf 
      )
# 822 "regexp.ml"

  | 5 ->
# 364 "regexp.mll"
      (
        let s = char_lexeme lexbuf in
	let clses =  range lexbuf (Char s) in
	clses @ charclass lexbuf
      )
# 831 "regexp.ml"

  | 6 ->
# 369 "regexp.mll"
       ( error lexbuf "Unmatched [ in regex" )
# 836 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_charclass_rec lexbuf __ocaml_lex_state

and range lexbuf =
    __ocaml_lex_range_rec lexbuf 68
and __ocaml_lex_range_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 375 "regexp.mll"
      (
        (* not a range *)
        fun c ->
	  ClassChar c :: 
	  charclass (from_string (lexeme lexbuf ^ "]" (* to finish *)))
      )
# 852 "regexp.ml"

  | 1 ->
# 383 "regexp.mll"
      (
        fun c ->
	  let e = escaped lexbuf in
	  [ClassRange (c, e)]
      )
# 861 "regexp.ml"

  | 2 ->
# 390 "regexp.mll"
      (
        fun c ->
	  let c' = Char (lexeme lexbuf).[1] in
	  [ClassRange (c, c')]
      )
# 870 "regexp.ml"

  | 3 ->
# 395 "regexp.mll"
       ( fun c -> [ClassChar c] )
# 875 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_range_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
    __ocaml_lex_escaped_rec lexbuf 78
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 411 "regexp.mll"
      ( 
	let lxm = lexeme lexbuf in
	if lxm = "Q" then assert false; (* must be treated differently *)
	Escaped lxm
      )
# 890 "regexp.ml"

  | 1 ->
# 416 "regexp.mll"
       ( error lexbuf "Search pattern not terminated" )
# 895 "regexp.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

# 418 "regexp.mll"
 
let from_string s =
  let lexbuf = Lexing.from_string s in
  let regexp = tokens lexbuf in
  let endpos = lexeme_end lexbuf in
  if endpos < String.length s then
    raise (Error (endpos, endpos + 1,
		  Printf.sprintf "Unmatched %c" s.[endpos]))
  else regexp

type typ = {
    num_of_groups : int;
    named_groups : (string * int) list;
    callouts : int list; (* 255 : default, not in the list *)
    named_callouts : (string * int) list; (* caml extension *)
  }

exception Double_defined_group of string
exception Too_many_callouts 

let type_regexp re =

  let pos = ref 0 in
  let named_groups = ref [] in
  let callouts = ref [] in
  let named_callouts = ref [] in

  let rec regexp re = List.iter token re
  and token = function
    | Group (Some n, re) -> 
	if List.mem_assoc n !named_groups then 
	  raise (Double_defined_group n);
	incr pos;
	named_groups := (n, !pos) :: !named_groups;
	regexp re
    | Group (None, re) -> 
	incr pos;
	regexp re
    | Quantifier (_, _, _, tkn) -> token tkn
    | Cluster (_, re)
    | LookAhead (_, re)
    | LookBehind (_, re)
    | Independent re -> regexp re
    | CallOut n -> callouts := n :: !callouts
    | CallOutByName s -> named_callouts := s :: !named_callouts
    | Char _
    | MetaChar _
    | Escaped _
    | Quoted _
    | Comment _
    | CharClass _
    | Modifier _
    | PBackRef _
    | Recursive _ -> ()
  in

  let give_numbers_for_named_callouts = 
    let pos = ref 1 in
    let rec f = function
      | [] -> []
      | s::ss ->
	  while List.mem !pos !callouts do incr pos done;
	  if !pos = 255 then raise Too_many_callouts;
	  (s, !pos) :: f ss
    in
    f 
  in

  regexp re;
  { num_of_groups= !pos;
    named_groups= !named_groups;
    callouts= !callouts;
    named_callouts= give_numbers_for_named_callouts !named_callouts }

let string_of_tokens typ tkns =
  let buf = Buffer.create 16 in
  let char c = Buffer.add_char buf c in
  let string s = Buffer.add_string buf s in
  let greedy = function
    | true -> char '?'
    | false -> ()
  in

  let rec token = function
    | MetaChar c -> char c
    | Group (None, tkns) -> 
	char '(';
	List.iter token tkns;
	char ')'
    | Group (Some s, tkns) -> 
	string "(?P<";
	string s;
	char '>';
	List.iter token tkns;
	char ')'
    | Escaped s ->
	char '\\';
	string s
    | Quoted s ->
	string "\\Q";
	string s;
	string "\\E"
    | Quantifier (b, 0, -1, tk) ->
	token tk;
	char '*';
	greedy b
    | Quantifier (b, 1, -1, tk) ->
	token tk;
	char '+';
	greedy b
    | Quantifier (b, 0, 1, tk) ->
	token tk;
	char '?';
	greedy b
    | Quantifier (b, n, -1, tk) ->
	token tk;
	char '{';
	string (string_of_int n);
	char ',';
	char '}';
	greedy b
    | Quantifier (b, n, m, tk) when n = m ->
	token tk;
	char '{';
	string (string_of_int n);
	char '}';
	greedy b
    | Quantifier (b, n, m, tk) ->
	token tk;
	char '{';
	string (string_of_int n);
	char ',';
	string (string_of_int m);
	char '}';
	greedy b
    | Char c -> char c
    | CharClass (b, clses) ->
	char '[';
	if not b then char '^';
	List.iter cls clses;
	char ']'
    | Comment s ->
	(* FIXME: extended mode *)
	string "(?#";
	string s;
	char ')'
    | Modifier s ->
	string "(?";
	string s;
	char ')'
    | Cluster (md, tkns) ->
	string "(?";
	string md;
	char ':';
	List.iter token tkns;
	char ')'
    | LookAhead (true, tkns) ->
	string "(?=";
	List.iter token tkns;
	char ')'
    | LookAhead (false, tkns) ->
	string "(?!";
	List.iter token tkns;
	char ')'
    | LookBehind (true, tkns) ->
	string "(?<=";
	List.iter token tkns;
	char ')'
    | LookBehind (false, tkns) ->
	string "(?<!";
	List.iter token tkns;
	char ')'
    | Independent tkns ->
	string "(?>";
	List.iter token tkns;
	char ')'
    | PBackRef s ->
	string "(?P=";
	string s;
	char ')'
    | Recursive None -> 
	string "(?R)"
    | Recursive (Some n) ->
	string "(?P";
	string n;
	char ')'
    | CallOut n ->
	string "(?C";
	string (string_of_int n);
	char ')'
    | CallOutByName s ->
	let n = List.assq s typ.named_callouts in
	string "(?C";
	string (string_of_int n);
	char ')'
  
  and cls = function 
    | ClassChar tkn -> token tkn
    | ClassPOSIX (true, s) ->
	string "[:";
	string s;
	string ":]"
    | ClassPOSIX (false, s) ->
	string "[:^";
	string s;
	string ":]"
    | ClassRange (t1, t2) ->
	token t1;
	char '-';
	token t2
    | ClassQuoted s ->
	string "\\Q";
	string s;
	string "\\E"
  in
  
  List.iter token tkns;
  Buffer.contents buf

class virtual result ty groups = 
  let named_groups = 
    List.map (fun (n,pos) -> n, Array.unsafe_get groups pos) ty.named_groups
  in
  object
  method _groups = (groups : string array)
  method _named_groups = (named_groups : (string * string) list)
  method _group n = groups.(n)
  method _unsafe_group n = Array.unsafe_get groups n
  method _named_group s = List.assoc s named_groups
end

type 'a t = {
    string : string;
    typ : typ;
    result : result;
  }


# 1140 "regexp.ml"
