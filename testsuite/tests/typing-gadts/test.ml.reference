
#                                                         module Exp :
  sig
    type 'a t =
        IntLit : int -> int t
      | BoolLit : bool -> bool t
      | Pair : 'a t * 'b t -> ('a * 'b) t
      | App : ('a -> 'b) t * 'a t -> 'b t
      | Abs : ('a -> 'b) -> ('a -> 'b) t
    val eval : 'a t -> 'a
    val discern : 'a t -> int
  end
#                                     module List :
  sig
    type zero
    type 'a t = Nil : zero t | Cons : 'a * 'b t -> ('a * 'b) t
    val head : ('a * 'b) t -> 'a
    val tail : ('a * 'b) t -> 'b t
    val length : 'a t -> int
  end
#                                                         Characters 206-227:
  ......function
  	| C2 x -> x
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
C1 _
Characters 469-526:
  ......function
  	| Foo _ , Foo _ -> true
  	| Bar _, Bar _ -> true
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Bar _, Foo _)
module Nonexhaustive :
  sig
    type 'a u = C1 : int -> int u | C2 : bool -> bool u
    type 'a v = C1 : int -> int v
    val unexhaustive : 'a u -> 'a
    module M : sig type t type u end
    type 'a t = Foo : M.t -> M.t t | Bar : M.u -> M.u t
    val same_type : 'a t * 'a t -> bool
  end
#                             module Exhaustive :
  sig
    type t = int
    type u = bool
    type 'a v = Foo : t -> t v | Bar : u -> u v
    val same_type : 'a v * 'a v -> bool
  end
#               Characters 119-120:
      let eval (D x) = x
                       ^
Error: This expression has type ex#12 t
       but an expression was expected of type ex#12 t
       The type constructor ex#12 would escape its scope
#                       Characters 157-158:
  	  C ->
     ^
Error: Recursive local constraint when unifying (s, s) t with (s, s * s) t
#                         Characters 174-182:
  	| (IntLit _ | BoolLit _) -> ()
      ^^^^^^^^
Error: This pattern matches values of type int t
       but a pattern was expected which matches values of type s t
#                         Characters 213-226:
  	| `A, BoolLit _ -> ()
     ^^^^^^^^^^^^^
Error: This pattern matches values of type ([? `A ] as 'a) * bool t
       but a pattern was expected which matches values of type 'a * int t
#                                 module Propagation :
  sig
    type 'a t = IntLit : int -> int t | BoolLit : bool -> bool t
    val check : 'a t -> 'a
  end
#             Characters 87-88:
    let f = function A -> 1 | B -> 2
                              ^
Error: This pattern matches values of type b
       but a pattern was expected which matches values of type a
#   type 'a t = Int : int t
#   val ky : 'a -> 'a -> 'a = <fun>
#       val test : 'a t -> 'a = <fun>
#         Characters 70-82:
    let r = match x with Int -> ky (1 : a) 1  (* fails *)
                                ^^^^^^^^^^^^
Error: This expression has type a = int
       but an expression was expected of type a = int
       Type a = int is not compatible with type 'a 
#       Characters 69-81:
    let r = match x with Int -> ky 1 (1 : a)  (* fails *)
                                ^^^^^^^^^^^^
Error: This expression has type int but an expression was expected of type
         int
#       val test : 'a t -> int = <fun>
#       val test : 'a t -> 'a = <fun>
#       val test : 'a t -> int = <fun>
#       val test : 'a t -> 'a = <fun>
#         val test2 : 'a t -> 'a option = <fun>
#         val test2 : 'a t -> 'a option = <fun>
#           val test2 : 'a t -> 'a option = <fun>
#           Characters 152-154:
    begin match x with Int -> u := Some 1; r := !u end;
                                                ^^
Error: This expression has type int option
       but an expression was expected of type a option
       Type int is not compatible with type a = int 
       Type a = int is not compatible with type 'a 
#           val test2 : 'a t -> 'a option = <fun>
#               val test2 : 'a t -> 'a option = <fun>
#       Characters 100-101:
    match v with Int -> let y = either 1 x in y
                                              ^
Error: This expression has type int but an expression was expected of type
         int
#             val f : 'a t -> 'a -> 'a = <fun>
#         val f : 'a t -> 'a -> 'a = <fun>
#         val f : 'a t -> 'a -> 'a = <fun>
#         val f : 'a t -> 'a -> 'a = <fun>
#     val f : 'a t -> 'a -> 'a = <fun>
#               Characters 136-137:
      let module M = struct type b = a let z = (y : b) end
                                                ^
Error: This expression has type a = int
       but an expression was expected of type b = int
       Type a = int is not compatible with type 'a 
#           val f : 'a t -> int -> int = <fun>
#                     type 'a h = Has_m : < m : int > h | Has_b : < b : bool > h
val f : 'a h -> 'a = <fun>
#               type 'a j = Has_A : [ `A of int ] j | Has_B : [ `B of bool ] j
val f : 'a j -> 'a = <fun>
#   type ('a, 'b) eq = Eq : ('a, 'a) eq
#     Characters 4-90:
  ....f : type a b. (a,b) eq -> (<m : a; ..> as 'a) -> (<m : b; ..> as 'a) =
    fun Eq o -> o
Error: This type scheme cannot quantify 'x0 :
it is aliased to another variable.
#       Characters 74-75:
    fun Eq o -> o
                ^
Error: This expression has type < m : a; .. >
       but an expression was expected of type < m : b; .. >
       Type a is not compatible with type b = a 
       Type b = a is not compatible with type 'a 
       Types for method m are incompatible
#       val f : ('a, 'b) eq -> < m : 'a > -> < m : 'b > = <fun>
#   val int_of_bool : (bool, int) eq = Eq
#   val x : < m : bool > = <obj>
# val y : < m : bool > * < m : int > = (<obj>, <obj>)
#     Characters 5-75:
  ....f : type a b. (a,b) eq -> [> `A of a] -> [> `A of b] =
    fun Eq o -> o..............
Error: This definition has type
         'a. ('a, 'a) eq -> ([> `A of 'a ] as 'b) -> 'b
       which is less general than 'x1 'x0. ('x1, 'x0) eq -> 'b -> 'b
#     Characters 5-85:
  ....f : type a b. (a,b) eq -> [< `A of a | `B] -> [< `A of b | `B] =
    fun Eq o -> o..............
Error: This definition has type
         ('a, 'b) eq -> ([< `A of 'b & 'a | `B ] as 'c) -> 'c
       which is less general than 'x1 'x0. ('x1, 'x0) eq -> 'c -> 'c
#     val f : ('a, 'b) eq -> [ `A of 'a | `B ] -> [ `A of 'b | `B ] = <fun>
#                                                     type 'a t = A of int | B of bool | C of float | D of 'a
type 'a ty =
    TE : 'a ty -> 'a array ty
  | TA : int ty
  | TB : bool ty
  | TC : float ty
  | TD : string -> bool ty
val f : 'a ty -> 'a t -> int = <fun>
#                   Characters 51-202:
  ..match x, y with
    | _, A z -> z
    | _, B z -> if z then 1 else 2
    | _, C z -> truncate z
    | TE TC, D [|1.0|] -> 14
    | TA, D 0 -> -1
    | TA, D z -> z
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(TE TC, D [|  |])
val f : 'a ty -> 'a t -> int = <fun>
#                   Characters 147-154:
    | D [|1.0|], TE TC -> 14
        ^^^^^^^
Error: This pattern matches values of type 'a array
       but a pattern was expected which matches values of type a
#                       Characters 259-266:
    | {left=TE TC; right=D [|1.0|]} -> 14
                           ^^^^^^^
Error: This pattern matches values of type 'a array
       but a pattern was expected which matches values of type a
#                       Characters 92-334:
  ..match {left=x; right=y} with
    | {left=_; right=A z} -> z
    | {left=_; right=B z} -> if z then 1 else 2
    | {left=_; right=C z} -> truncate z
    | {left=TE TC; right=D [|1.0|]} -> 14
    | {left=TA; right=D 0} -> -1
    | {left=TA; right=D z} -> z
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
{left=TE (TE _); right=D [| _ |]}
type ('a, 'b) pair = { left : 'a; right : 'b; }
val f : 'a ty -> 'a t -> int = <fun>
# 
