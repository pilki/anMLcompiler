Index: typing/env.ml
===================================================================
--- typing/env.ml	(revision 11210)
+++ typing/env.ml	(working copy)
@@ -56,7 +56,7 @@
   cltypes: (Path.t * cltype_declaration) Ident.tbl;
   summary: summary;
   local_constraints: bool;
-  level_map: (int * int) list;
+  gadt_instances: (int * Btype.TypeSet.t ref) list;
 }
 
 and module_components = module_components_repr Lazy.t
@@ -96,7 +96,7 @@
   modules = Ident.empty; modtypes = Ident.empty;
   components = Ident.empty; classes = Ident.empty;
   cltypes = Ident.empty; 
-  summary = Env_empty; local_constraints = false; level_map = [] }
+  summary = Env_empty; local_constraints = false; gadt_instances = [] }
 
 let diff_keys is_local tbl1 tbl2 =
   let keys2 = Ident.keys tbl2 in
@@ -286,13 +286,14 @@
   (* the level is changed when updating newtype definitions *)
   if !Clflags.principal then begin
     match level, decl.type_newtype_level with
-      Some level, Some def_level when level < def_level -> raise Not_found
+      Some level, Some (_, exp_level) when level < exp_level -> raise Not_found
     | _ -> ()
   end;
   match decl.type_manifest with
   | Some body when decl.type_private = Public
               || decl.type_kind <> Type_abstract
-              || Btype.has_constr_row body -> (decl.type_params, body)
+              || Btype.has_constr_row body ->
+                  (decl.type_params, body, may_map snd decl.type_newtype_level)
   (* The manifest type of Private abstract data types without
      private row are still considered unknown to the type system.
      Hence, this case is caught by the following clause that also handles
@@ -308,7 +309,7 @@
   match decl.type_manifest with
   (* The manifest type of Private abstract data types can still get
      an approximation using their manifest type. *)
-  | Some body -> (decl.type_params, body)
+  | Some body -> (decl.type_params, body, may_map snd decl.type_newtype_level)
   | _ -> raise Not_found
 
 let find_modtype_expansion path env =
@@ -453,33 +454,35 @@
 and lookup_cltype =
   lookup (fun env -> env.cltypes) (fun sc -> sc.comp_cltypes)
 
-(* Level handling *)
+(* GADT instance tracking *)
 
-(* The level map is a list of pairs describing separate segments (lv,lv'),
-   lv < lv', organized in decreasing order.
-   The definition level is obtained by mapping a level in a segment to the
-   high limit of this segment.
-   The definition level of a newtype should be greater or equal to
-   the highest level of the newtypes in its manifest type.
- *)
+let gadt_instance_level env t =
+  let rec find_instance = function
+      [] -> None
+    | (lv, r) :: rem ->
+        if Btype.TypeSet.mem t !r then Some lv else find_instance rem
+  in find_instance env.gadt_instances
 
-let rec map_level lv = function
-  | [] -> lv
-  | (lv1, lv2) :: rem ->
-      if lv > lv2 then lv else
-      if lv >= lv1 then lv2 else map_level lv rem
+let add_gadt_instances env lv tl =
+  let r =
+    try List.assoc lv env.gadt_instances with Not_found -> assert false in
+  r := List.fold_right Btype.TypeSet.add tl !r
 
-let map_newtype_level env lv = map_level lv env.level_map
+(* Only use this after expand_head! *)
+let add_gadt_instance_chain env lv t =
+  let r =
+    try List.assoc lv env.gadt_instances with Not_found -> assert false in
+  let rec add_instance t =
+    let t = Btype.repr t in
+    if not (Btype.TypeSet.mem t !r) then begin
+      r := Btype.TypeSet.add t !r;
+      match t.desc with
+        Tconstr (p, _, memo) ->
+          may add_instance (Btype.find_expans Private p !memo)
+      | _ -> ()
+    end
+  in add_instance t
 
-(* precondition: lv < lv' *)
-let rec add_level lv lv' = function
-  | [] -> [lv, lv']
-  | (lv1, lv2) :: rem as l ->
-      if lv2 < lv then (lv, lv') :: l else
-      if lv' < lv1 then (lv1, lv2) :: add_level lv lv' rem
-      else add_level (max lv lv1) (min lv' lv2) rem      
-
-
 (* Expand manifest module type names at the top of the given module type *)
 
 let rec scrape_modtype mty env =
@@ -773,14 +776,13 @@
 and add_cltype id ty env =
   store_cltype id (Pident id) ty env
 
-let add_local_constraint id info mlv env =
+let add_local_constraint id info elv env =
   match info with
-    {type_manifest = Some ty; type_newtype_level = Some lv} ->
-      (* use the newtype level for this definition, lv is the old one *)
-      let env = add_type id {info with type_newtype_level = Some mlv} env in
-      let level_map =
-        if lv < mlv then add_level lv mlv env.level_map else env.level_map in
-      { env with local_constraints = true; level_map = level_map }
+    {type_manifest = Some ty; type_newtype_level = Some (lv, _)} ->
+      (* elv is the expansion level, lv is the definition level *)
+      let env =
+        add_type id {info with type_newtype_level = Some (lv, elv)} env in
+      { env with local_constraints = true }
   | _ -> assert false
 
 (* Insertion of bindings by name *)
Index: typing/typecore.ml
===================================================================
--- typing/typecore.ml	(revision 11210)
+++ typing/typecore.ml	(working copy)
@@ -1989,6 +1989,7 @@
       end
   | Pexp_newtype(name, sbody) ->
       (* Create a fake abstract type declaration for name. *)
+      let level = get_current_level () in
       let decl = {
         type_params = [];
         type_arity = 0;
@@ -1996,7 +1997,7 @@
         type_private = Public;
         type_manifest = None;
         type_variance = [];
-        type_newtype_level = Some (get_current_level ());
+        type_newtype_level = Some (level, level);
       }
       in
       let ty = newvar () in
Index: typing/typedecl.ml
===================================================================
--- typing/typedecl.ml	(revision 11210)
+++ typing/typedecl.ml	(working copy)
@@ -404,7 +404,7 @@
           else if to_check path' && not (List.mem path' prev_exp) then begin
             try
               (* Attempt expansion *)
-              let (params0, body0) = Env.find_type_expansion path' env in
+              let (params0, body0, _) = Env.find_type_expansion path' env in
               let (params, body) =
                 Ctype.instance_parameterized_type params0 body0 in
               begin
Index: typing/types.mli
===================================================================
--- typing/types.mli	(revision 11210)
+++ typing/types.mli	(working copy)
@@ -144,9 +144,9 @@
     type_manifest: type_expr option;
     type_variance: (bool * bool * bool) list;
     (* covariant, contravariant, weakly contravariant *)
-    type_newtype_level: int option }
+    type_newtype_level: (int * int) option }
+    (* definition level * expansion level *)
 
-
 and type_kind =
     Type_abstract
   | Type_record of
Index: typing/ctype.ml
===================================================================
--- typing/ctype.ml	(revision 11210)
+++ typing/ctype.ml	(working copy)
@@ -470,7 +470,7 @@
         free_variables := (ty, real) :: !free_variables
     | Tconstr (path, tl, _), Some env ->
         begin try
-          let (_, body) = Env.find_type_expansion path env in
+          let (_, body, _) = Env.find_type_expansion path env in
           if (repr body).level <> generic_level then
             free_variables := (ty, real) :: !free_variables
         with Not_found -> ()
@@ -687,7 +687,7 @@
   try
     match (Env.find_type p env).type_newtype_level with
       | None -> Path.binding_time p
-      | Some x -> x
+      | Some (x, _) -> x
   with 
     | _ -> 
       (* no newtypes in predef *)
@@ -696,9 +696,13 @@
 let rec update_level env level ty =
   let ty = repr ty in
   if ty.level > level then begin
+    if !Clflags.principal && Env.has_local_constraints env then begin
+      match Env.gadt_instance_level env ty with
+        Some lv -> if level < lv then raise (Unify [(ty, newvar2 level)])
+      | None -> ()
+    end;
     match ty.desc with
-      Tconstr(p, tl, abbrev)
-      when level < Env.map_newtype_level env (get_level env p) ->
+      Tconstr(p, tl, abbrev) when level < get_level env p ->
         (* Try first to replace an abbreviation by its expansion. *)
         begin try
           (* if is_newtype env p then raise Cannot_expand; *)
@@ -1025,7 +1029,7 @@
   | Some (env, newtype_lev) ->
       let existentials = List.map copy cstr.cstr_existentials in
       let process existential = 
-        let decl = new_declaration (Some newtype_lev) None in
+        let decl = new_declaration (Some (newtype_lev, newtype_lev)) None in
         let (id, new_env) =
           Env.enter_type (get_new_abstract_name ()) decl !env in
         env := new_env;
@@ -1271,7 +1275,7 @@
             end;
           ty
       | None ->
-          let (params, body) =
+          let (params, body, lv) =
             try find_type_expansion level path env with Not_found ->
               raise Cannot_expand
           in
@@ -1284,6 +1288,15 @@
               ty.desc <- Tvariant { row with row_name = Some (path, args) }
           | _ -> ()
           end;
+          (* For gadts, remember type as non exportable *)
+          if !Clflags.principal then begin
+            match lv with
+              Some lv -> Env.add_gadt_instances env lv [ty; ty']
+            | None ->
+                match Env.gadt_instance_level env ty with
+                  Some lv -> Env.add_gadt_instances env lv [ty']
+                | None -> ()
+          end;
           ty'
       end
   | _ ->
@@ -1306,15 +1319,7 @@
 let try_expand_once env ty =
   let ty = repr ty in
   match ty.desc with
-    Tconstr (p, _, _) ->
-      let ty' = repr (expand_abbrev env ty) in
-      if !Clflags.principal then begin
-        match (Env.find_type p env).type_newtype_level with
-          Some lv when ty.level < Env.map_newtype_level env lv  ->
-            link_type ty ty'
-        | _ -> ()
-      end;
-      ty'
+    Tconstr (p, _, _) -> repr (expand_abbrev env ty)
   | _ -> raise Cannot_expand
 
 let _ = forward_try_expand_once := try_expand_once
@@ -1324,11 +1329,16 @@
    May raise Unify, if a recursion was hidden in the type. *)
 let rec try_expand_head env ty =
   let ty' = try_expand_once env ty in
-  begin try
-    try_expand_head env ty'
-  with Cannot_expand ->
-    ty'
-  end
+  let ty'' =
+    try try_expand_head env ty'
+    with Cannot_expand -> ty'
+  in
+  if !Clflags.principal then begin
+    match Env.gadt_instance_level env ty'' with
+      None    -> ()
+    | Some lv -> Env.add_gadt_instance_chain env lv ty
+  end;
+  ty''
 
 (* Expand once the head of a type *)
 let expand_head_once env ty =
@@ -1405,7 +1415,7 @@
 *)
 let generic_abbrev env path =
   try
-    let (_, body) = Env.find_type_expansion path env in
+    let (_, body, _) = Env.find_type_expansion path env in
     (repr body).level = generic_level
   with
     Not_found ->
@@ -1742,7 +1752,7 @@
 let reify env t =
   let newtype_level = get_newtype_level () in
   let create_fresh_constr lev row = 
-      let decl = new_declaration (Some (newtype_level)) None in
+      let decl = new_declaration (Some (newtype_level, newtype_level)) None in
       let name = 
         let name = get_new_abstract_name () in 
         if row then name ^ "#row" else name
@@ -2091,6 +2101,15 @@
   if unify_eq !env t1' t2' then () else
 
   let t1 = repr t1 and t2 = repr t2 in
+  if !Clflags.principal then begin
+    match Env.gadt_instance_level !env t1',Env.gadt_instance_level !env t2' with
+      Some lv1, Some lv2 ->
+        if lv1 > lv2 then Env.add_gadt_instance_chain !env lv1 t2 else
+        if lv2 > lv2 then Env.add_gadt_instance_chain !env lv2 t1
+    | Some lv1, None -> Env.add_gadt_instance_chain !env lv1 t2
+    | None, Some lv2 -> Env.add_gadt_instance_chain !env lv2 t1
+    | None, None     -> ()
+  end;
   if unify_eq !env t1 t1' || not (unify_eq !env t2 t2') then
     unify3 env t1 t1' t2 t2'
   else
Index: typing/env.mli
===================================================================
--- typing/env.mli	(revision 11210)
+++ typing/env.mli	(working copy)
@@ -33,14 +33,18 @@
 val find_cltype: Path.t -> t -> cltype_declaration
 
 val find_type_expansion:
-    ?use_local:bool -> ?level:int -> Path.t -> t -> type_expr list * type_expr
-val find_type_expansion_opt: Path.t -> t -> type_expr list * type_expr
+    ?use_local:bool -> ?level:int -> Path.t -> t ->
+    type_expr list * type_expr * int option
+val find_type_expansion_opt:
+    Path.t -> t -> type_expr list * type_expr * int option
 (* Find the manifest type information associated to a type for the sake
    of the compiler's type-based optimisations. *)
 val find_modtype_expansion: Path.t -> t -> Types.module_type
 
 val has_local_constraints: t -> bool
-val map_newtype_level: t -> int -> int
+val gadt_instance_level: t -> type_expr -> int option
+val add_gadt_instances: t -> int -> type_expr list -> unit
+val add_gadt_instance_chain: t -> int -> type_expr -> unit
 
 (* Lookup by long identifiers *)
 
Index: typing/types.ml
===================================================================
--- typing/types.ml	(revision 11210)
+++ typing/types.ml	(working copy)
@@ -146,8 +146,8 @@
     type_private: private_flag;
     type_manifest: type_expr option;
     type_variance: (bool * bool * bool) list;
-    type_newtype_level: int option }
             (* covariant, contravariant, weakly contravariant *)
+    type_newtype_level: (int * int) option }
 
 and type_kind =
     Type_abstract
